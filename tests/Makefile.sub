TESTS = \

include tests/libjive/Makefile.sub
include tests/libjlm/Makefile.sub
include tests/libjlc/Makefile.sub

TEST_SOURCES = \
	tests/test-operation.cpp \
	tests/test-registry.cpp \
	tests/test-runner.cpp \
	tests/test-types.cpp \
	tests/libjlm/opt/alias-analyses/AliasAnalysesTests.cpp \
	$(patsubst %, tests/%.cpp, $(TESTS))

tests/test-runner: jive-debug libjlm-debug libjlc-debug
tests/test-runner: CXXFLAGS += -g -DJIVE_DEBUG -DJLM_DEBUG -DJLM_ENABLE_ASSERTS -Wall -Wpedantic -Wextra -Wno-unused-parameter --std=c++17 -Wfatal-errors
tests/test-runner: CPPFLAGS += -I$(JLM_ROOT)/libjlm/include -I$(JLM_ROOT)/libjlc/include -I$(JLM_ROOT)/libjive/include -I$(shell $(LLVMCONFIG) --includedir)
tests/test-runner: LDFLAGS=-L. -ljlc -ljlm $(shell $(LLVMCONFIG) --ldflags --libs --system-libs) -ljive
tests/test-runner: %: $(patsubst %.cpp, %.la, $(TEST_SOURCES)) $(JLM_ROOT)/libjive.a $(JLM_ROOT)/libjlm.a $(JLM_ROOT)/libjlc.a
	$(CXX) -o $@ $(filter %.la, $^) $(LDFLAGS)

$(patsubst %, tests/%.la, $(TESTS)): CPPFLAGS += -Itests -I$(shell $(LLVMCONFIG) --includedir)

TESTLOG = true

check: check-utests check-ctests

check-ctests: jlc-debug jlm-opt-debug
	@rm -rf ctests.log
	@FAILED_TESTS="" ; \
	for TEST in `ls tests/c-tests`; do \
		$(TESTLOG) -n "$$TEST: " ; if tests/test-jlc.sh tests/c-tests/$$TEST >>ctests.log 2>&1 ; then $(TESTLOG) pass ; else $(TESTLOG) FAIL ; FAILED_TESTS="$$FAILED_TESTS $$TEST" ; fi ; \
	done ; \
	set -e ; \
	if [ "x$$FAILED_TESTS" != x ] ; then printf '\033[0;31m%s\033[0m%s\n' "Failed c-tests:" "$$FAILED_TESTS" ; exit 1 ; else printf '\033[0;32m%s\n\033[0m' "All c-tests passed" ; fi ; \

check-utests: tests/test-runner
	@rm -rf utests.log
	@FAILED_TESTS="" ; \
	for TEST in $(TESTS); do \
		$(TESTLOG) -n "$$TEST: " ; if tests/test-runner $$TEST >>utests.log 2>&1 ; then $(TESTLOG) pass ; else $(TESTLOG) FAIL ; FAILED_TESTS="$$FAILED_TESTS $$TEST" ; fi ; \
	done ; \
	set -e ; \
	if [ "x$$FAILED_TESTS" != x ] ; then printf '\033[0;31m%s\033[0m%s\n' "Failed u-tests:" "$$FAILED_TESTS" ; exit 1 ; else printf '\033[0;32m%s\n\033[0m' "All u-tests passed" ; fi ; \

valgrind-check: tests/test-runner
	@rm -rf check.log
	@FAILED_TESTS="" ; \
	for TEST in $(TESTS); do \
		$(TESTLOG) -n "$$TEST: " ; if valgrind --leak-check=full --error-exitcode=1 tests/test-runner $$TEST >>check.log 2>&1 ; then $(TESTLOG) pass ; else $(TESTLOG) FAIL ; FAILED_TESTS="$$UNEXPECTED_FAILED_TESTS $$TEST" ; fi ; \
	done ; \
	set -e ; \
	if [ "x$$FAILED_TESTS" != x ] ; then printf '\033[0;31m%s\033[0m%s\n' "Failed valgrind-tests:" "$$FAILED_TESTS" ; exit 1 ; else printf '\033[0;32m%s\n\033[0m' "All valgrind-tests passed" ; fi ; \
