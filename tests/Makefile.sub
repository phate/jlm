libjlmtest_SOURCES = \
	tests/test-operation.cpp \
	tests/test-registry.cpp \
	tests/test-runner.cpp \
	tests/test-types.cpp \
	tests/TestRvsdgs.cpp \

libjlmtest_HEADERS = \
	tests/test-operation.hpp \

$(eval $(call common_library,libjlmtest))

################################################################################
# Rules to compile test cases with jlc and run them

JLC_COMPILE_TESTS = \
	tests/c-tests/test-array-struct \
	tests/c-tests/test-assertion \
	tests/c-tests/test-binary \
	tests/c-tests/test-call-by-value \
	tests/c-tests/test-casts \
	tests/c-tests/test-complex \
	tests/c-tests/test-conditional \
	tests/c-tests/test-constant-array \
	tests/c-tests/test-do-while \
	tests/c-tests/test-extractvalue \
	tests/c-tests/test-factorial \
	tests/c-tests/test-fctarray \
	tests/c-tests/test-fctptr \
	tests/c-tests/test-fibonacci \
	tests/c-tests/test-fp-arithmetic \
	tests/c-tests/test-fp-comparison \
	tests/c-tests/test-fprintf \
	tests/c-tests/test-gblfctarray \
	tests/c-tests/test-global-variable \
	tests/c-tests/test-irreducible \
	tests/c-tests/test-long-double \
	tests/c-tests/test-loop-return \
	tests/c-tests/test-main \
	tests/c-tests/test-memcpy \
	tests/c-tests/test-printf \
	tests/c-tests/test-ptr-comparison \
	tests/c-tests/test-recfct \
	tests/c-tests/test-struct2 \
	tests/c-tests/test-struct \
	tests/c-tests/test-switch \
	tests/c-tests/test-valist \
	tests/c-tests/test-zeroinitialization

$(patsubst %, $(BUILD_OUT_PREFIX)%.jlm, $(JLC_COMPILE_TESTS)): $(BUILD_OUT_PREFIX)%.jlm : %.c $(BUILD_OUT_PREFIX)jlc
	@mkdir -p $(dir $@)
	@cp $< $$(dirname $@)/$$(basename $<)
	$(BUILD_OUT_PREFIX)jlc -Wall -Werror -O3 -o $@ $$(dirname $@)/$$(basename $<)

GENERATED_FILES+=$(patsubst %, $(BUILD_OUT_PREFIX)%.jlm, $(JLC_COMPILE_TESTS))
GENERATED_FILES+=$(patsubst %, $(BUILD_OUT_PREFIX)%.c, $(JLC_COMPILE_TESTS))
GENERATED_FILES+=$(patsubst %, $(BUILD_OUT_PREFIX)%.jlm, $(JLC_COMPILE_TESTS))
GENERATED_FILES+=$(patsubst %, $(BUILD_OUT_PREFIX)%.o, $(JLC_COMPILE_TESTS))

$(patsubst %, run-%, $(JLC_COMPILE_TESTS)): run-%: $(BUILD_OUT_PREFIX)%.jlm
	@echo -n "Running ctest $^ ... " ; \
	if $^ >$^.log 2>&1 ; then \
		echo "success" ; \
	else \
		EXIT_CODE="$$?" ; \
		echo "failed. See $^.log:" ; cat $^.log ; \
		exit "$$EXIT_CODE" ; \
	fi

# Run the jlc-compiled binaries as part of tests. This may
# be problematic when cross-compiling for foreign targets,
# but leave this to be addressed another day.
check: $(patsubst %, run-%, $(JLC_COMPILE_TESTS))
