# Copyright 2019 Nico Rei√ümann <nico.reissmann@gmail.com>
# See COPYING for terms of redistribution.

COMMANDPATHS = \
" \
\#ifndef JLM_TOOLING_COMMANDPATHS_HPP\n \
\#define JLM_TOOLING_COMMANDPATHS_HPP\n \
\n \
\#include <jlm/util/file.hpp>\n \
\n \
namespace jlm::tooling {\n \
\n \
  static inline jlm::util::filepath clangpath(\"$(shell $(LLVMCONFIG) --bindir)/clang\");\n \
  static inline jlm::util::filepath llcpath(\"$(shell $(LLVMCONFIG) --bindir)/llc\");\n \
\n \
}\n \
\n \
\#endif \
"

# A generated header file will have the paths to be compiled into the binary.
# Since it is a generated file, create it within the build output directory
# (to avoid polluting the source directory with generated files). Set up
# search path and compile dependencies to include the generated file.
COMMANDPATHSFILE = $(BUILD_OUT_PREFIX)jlm/tooling/CommandPaths.hpp
$(BUILD_OUT_PREFIX)jlm/tooling/Command.la: $(COMMANDPATHSFILE)
$(BUILD_OUT_PREFIX)jlm/tooling/Command.coverage.la: $(COMMANDPATHSFILE)
$(BUILD_OUT_PREFIX)jlm/tooling/Command.lo: $(COMMANDPATHSFILE)
$(BUILD_OUT_PREFIX)jlm/tooling/Command.la: CPPFLAGS+=-I$(BUILD_OUT_PREFIX)
$(BUILD_OUT_PREFIX)jlm/tooling/Command.coverage.la: CPPFLAGS+=-I$(BUILD_OUT_PREFIX)
$(BUILD_OUT_PREFIX)jlm/tooling/Command.lo: CPPFLAGS+=-I$(BUILD_OUT_PREFIX)

$(COMMANDPATHSFILE):
	@mkdir -p $(dir $@)
	@echo creating $(COMMANDPATHSFILE)
	@printf $(COMMANDPATHS) > $@

GENERATED_FILES += $(COMMANDPATHSFILE)

libtooling_SOURCES = \
    jlm/tooling/Command.cpp \
    jlm/tooling/CommandGraph.cpp \
    jlm/tooling/CommandGraphGenerator.cpp \
    jlm/tooling/CommandLine.cpp \

libtooling_HEADERS = \
    jlm/tooling/Command.hpp \
    jlm/tooling/CommandGraph.hpp \
    jlm/tooling/CommandGraphGenerator.hpp \
    jlm/tooling/CommandLine.hpp \

libtooling_TESTS = \
	tests/jlm/tooling/TestJlcCommandGraphGenerator \
	tests/jlm/tooling/TestJlcCommandLineParser \
	tests/jlm/tooling/TestJlmOptCommand \
	tests/jlm/tooling/TestJlmOptCommandLineParser \

libtooling_TEST_LIBS = \
	libtooling \
	libhls \
	libllvm \
	libmlir \
	librvsdg \
	libutil \
	libjlmtest \

libtooling_TEST_EXTRA_LDFLAGS = \
	$(MLIR_LDFLAGS) \
	$(shell $(LLVMCONFIG) --ldflags --libs --system-libs) \

$(eval $(call common_library,libtooling))
