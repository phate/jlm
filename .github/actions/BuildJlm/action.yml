name: "Build jlm"
description: "Configures and builds jlm along with the necessary dependencies."

inputs:
  enable-hls:
    description: "Enables HLS dialect. Default is 'false'."
    default: "false"
    required: false

  enable-mlir:
    description: "Enables MLIR dialect. Default is 'false'."
    default: "false"
    required: false

  enable-coverage:
    description: "Enables computation of test coverage. Default is 'false'."
    default: "false"
    required: false

  cxx:
    description: "Set C++ compiler. Default is 'clang++'."
    default: "clang++-16"
    required: false

runs:
  using: "composite"
  steps:
    - name: "Validate input"
      if: ${{inputs.enable-hls}} != 'true' || ${{inputs.enable-hls}} != 'false'
        || ${{inputs.enable-mlir}} != 'true' || ${{inputs.enable-mlir != 'false'
        || ${{inputs.enable-coverage}} != 'true' || ${{inputs.enable-coverage}} != 'false'
      run: |
        echo "Invalid input"
        exit 1
      shell: bash

    - name: "Install LLVM dependencies"
      uses: ./.github/action/InstallLlvmDependencies

    - name: "Install HLS dialect dependencies"
      if: ${{inputs.enable-hls}} == 'true'
      uses: ./.github/actions/BuildCirct

    - name: "Install MLIR dialect dependencies"
      if: ${{inputs.enable-mlir}} == 'true'
      uses: ./.github/actions/BuildMlirDialect

    - name: "Collect command line arguments"
      run: |
        export JLM_CONFIGURE_ARGUMENTS = "--target release --enable-asserts"
        if [[ "${{inputs.enable-hls}}" == "true" ]]; then
          JLM_CONFIGURE_ARGUMENTS = "$JLM_CONFIGURE_ARGUMENTS --enable-hls ${{ github.workspace }}/build-circt/circt"
        fi
        if [[ "${{inputs.enable-mlir}}" == "true" ]]; then
          JLM_CONFIGURE_ARGUMENTS = "$JLM_CONFIGURE_ARGUMENTS --enable-mlir ${{ github.workspace }}/lib/mlir-rvsdg"
        fi
        if [[ "${{inputs.enable-coverage}}" == "true" ]]; then
          JLM_CONFIGURE_ARGUMENTS = "$JLM_CONFIGURE_ARGUMENTS --enable-coverage"
        fi
        JLM_CONFIGURE_ARGUMENTS = "$JLM_CONFIGURE_ARGUMENTS CXX=${{inputs.cxx}}"
      shell: bash

    - name: "Configure jlm"
      run: ./configure.sh ${JLM_CONFIGURE_ARGUMENTS}
      shell: bash

    - name: "Compile jlm"
      run: make -j `nproc` -O
      shell: bash

    - name: "Add executables to PATH"
      run: echo '${{ github.workspace }}/build' >> $GITHUB_PATH
      shell: bash
