define HELP_TEXT_JLM
echo ""
echo "JLM Make Targets"
echo "--------------------------------------------------------------------------------"
echo "jlm-debug              Compile jlm libraries and tools in debug mode"
echo "jlm-release            Compile jlm libraries and tools in release mode"
echo "jlm-clean              Clean all build files and libraries"
echo ""
echo "jlc-debug              Compile jlc compiler in debug mode"
echo "jlc-release            Compile jlc compiler in release mode"
echo ""
echo "jlm-opt-debug          Compile jlm optimizer in debug mode"
echo "jlm-opt-release        Compile jlm optimizer in release mode"
echo ""
echo "Clang format Targets"
echo "--------------------------------------------------------------------------------"
echo "format                 Format all cpp and hpp files"
echo "format-dry-run         Report incorrect formatting of cpp and hpp files"
endef

# Try to detect llvm-config 
CONFIG        := $(shell command -v llvm-config 2> /dev/null)
CONFIGVERSION := $(shell command -v llvm-config-16 2> /dev/null)
ifdef LLVMCONFIG
  $(info LLVMCONFIG specified by user)
else ifdef CONFIGVERSION
  $(info Found llvm-config-16)
  LLVMCONFIG ?= llvm-config-16
else ifdef CONFIG
  $(info Found llvm-config (make sure that it is LLVM 16))
  LLVMCONFIG ?= llvm-config
else
  $(info Did not find llvm-config or llvm-config-16 and LLVMCONFIG is not specified)
endif

JLM_BIN = $(JLM_ROOT)/bin
JLM_BUILD = $(JLM_ROOT)/build

# -gdwarf-4 is used since the valgrind version in Ubuntu 22.04 doesn't support dwarf-5, 
#  which is produced by default by clang-14
CXXFLAGS += --std=c++17 -Wall -Wpedantic -Wextra -Wno-unused-parameter -Werror -Wfatal-errors -gdwarf-4
CXXFLAGS_DEBUG += -g -DJLM_DEBUG -DJLM_ENABLE_ASSERTS

$(JLM_BUILD)/%.la: $(JLM_ROOT)/%.cpp
	@mkdir -p ${dir $@}
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

$(JLM_BUILD)/%.o: $(JLM_ROOT)/%.cpp
	@mkdir -p ${dir $@}
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

$(JLM_BUILD)/%.a:
	rm -f $@
	ar cqv $@ $^
	ranlib $@

include $(JLM_ROOT)/jlm/hls/Makefile.sub
include $(JLM_ROOT)/jlm/llvm/Makefile.sub
include $(JLM_ROOT)/jlm/rvsdg/Makefile.sub
include $(JLM_ROOT)/jlm/tooling/Makefile.sub
include $(JLM_ROOT)/jlm/util/Makefile.sub
include $(JLM_ROOT)/tools/Makefile.sub
include $(JLM_ROOT)/docs/Makefile.sub
include $(JLM_ROOT)/tests/Makefile.sub

.PHONY: format
format:
	@find $(JLM_ROOT) -name "*.[ch]pp" -exec clang-format-16 --Werror --style="file:.clang-format" --verbose -i {} \;

.PHONY: format-dry-run
format-dry-run:
	@find $(JLM_ROOT) -name "*.[ch]pp" -exec clang-format-16 --dry-run --Werror --style="file:.clang-format" --verbose -i {} \;

.PHONY: jlm-debug
jlm-debug: libutil-debug libhls-debug jlm-opt-debug jlm-hls-debug jlc-debug jhls-debug

.PHONY: jlm-release
jlm-release: libutil-release libhls-release jlm-opt-release jlm-hls-release jlc-release jhls-release

.PHONY: jlm-clean
jlm-clean:
	@rm -rf $(JLM_BUILD)
	@rm -rf $(JLM_BIN)
	@rm -f $(JLM_ROOT)/utests.log
	@rm -f $(JLM_ROOT)/ctests.log
	@rm -f $(JLM_ROOT)/check.log
	@rm -f $(COMMANDPATHSFILE)
